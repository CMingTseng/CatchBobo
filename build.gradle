// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        jcenter()
        flatDir {
            dirs 'libs'
        }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.2'
        classpath 'com.google.gms:google-services:3.0.0'
        classpath 'com.google.firebase:firebase-plugins:1.0.5'
        classpath "gradle.plugin.com.gladed.gradle.androidgitversion:gradle-android-git-version:0.3.3"
    }
}

allprojects {
    repositories {
        jcenter()
        flatDir {
            dirs 'libs'
        }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://jitpack.io" }
    }
}

def getVersionNameSuffixDebug = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--long', '--always'
            standardOutput = stdout
        }
        def describe = stdout.toString().trim().split("-")
        return '-' + describe[1] + '-' + describe[2]
    }
    catch (ignored) {
        return "unspecified";
    }
}

def getVersionCodeByThisLocalHEADCommitCount = { ->//FIXME
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--count', 'HEAD'
            standardOutput = code
        }
        return Integer.valueOf(code);
    }
    catch (ignored) {
        return -1;
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--long'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}

def getBranchName = { ->
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'status'
            standardOutput = code
        }
        return code.toString().split("Your")[0].replace("On branch ", "").trim()
    }
    catch (ignored) {
        return -1;
    }
}

def getGitSHA1Hash = { ->
    try {
        def sha1hash = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'show', '--format="%h"', '--abbrev=4', '-q'
            standardOutput = sha1hash
        }

        return Integer.valueOf(sha1hash.toString().trim(), 16);
    }
    catch (ignored) {
        return 0
    }
}

def getGitTagId = { ->
    def formatuic = getVersionName().split("-")
    return formatuic[0];
}

def getGitCommitCount = { ->
    def formatuic = getVersionName().split("-")
    return formatuic[1];
}

def getAuthorName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'config', '--global', '--get', 'user.name'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return "";
    }
}

def getAuthorEmail = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'config', '--global', '--get', 'user.email'
            standardOutput = stdout
        }
        return stdout.toString().trim() + ',support@repaas.com'
    }
    catch (ignored) {
        return "";
    }
}

def buildTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}

ext {
    javasource = JavaVersion.VERSION_1_7
    javatarget = JavaVersion.VERSION_1_7
    compileSdkVersion = 25
    buildToolsVersion = '25.0.3'
    supportLibVersion = '25.3.1'
    runnerVersion = '0.5'
    rulesVersion = '0.5'
    UiAutomatorLibVersion = '2.1.2'
    FirebaseLibVersion = '10.2.1'
    versionCode = getVersionCodeByThisLocalHEADCommitCount()
//    versionName = getVersionName()
    versionName = getGitTagId() + "." + getGitCommitCount()
    versionNameSuffixDebug = getVersionNameSuffixDebug()
    appbuildTime = buildTime()
    authorName = getAuthorName()
    authorEmail = getAuthorEmail()
    bracnch = getBranchName()
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

